Software Project Prompt

To create a comprehensive Project Requirements Document for your software project, please answer the following questions in as much detail as possible: What is the primary purpose and vision of your software, and what specific problem does it solve? Who are your target users and key stakeholders, and what are their most important needs? What are the core functional requirements of your system, and can you prioritize them as must-have, should-have, or nice-to-have? What non-functional requirements must be met regarding performance, security, scalability, and accessibility? Can you describe the main user flows and interactions with the system, ideally with step-by-step breakdowns? What technical architecture do you envision, including programming languages, frameworks, databases, and third-party integrations? What are your success metrics and how will you measure them? What is your timeline for development, including major milestones and dependencies? What specific features must be included in the initial release versus future iterations? What potential risks or challenges do you foresee, and how might they be mitigated? Are there any regulatory, legal, or organizational constraints that will impact development? What assumptions are you making about users, technology, or resources? What specifically should be considered out-of-scope to prevent feature creep? How will changes to requirements be managed once development begins? Please provide as much specific information as possible for each question to ensure your PRD accurately captures your vision and serves as an effective blueprint for your development team.


Create a detailed app flow document by answering these questions for each page in your application: What is the specific name you use for this page? What core purpose does this page serve for your users? Can you list all visible UI elements users will encounter on this screen, including buttons, fields, and visual components? What specific actions can users take on this page, and how do they perform them? What data, if any, must users input here? What information or feedback does this page display to users? For each possible navigation path from this page, please explain: Which specific user action triggers navigation away from this page? What is the exact name of the destination page this action leads to? Are there any conditions that determine whether users reach that destination? If conditions exist, what alternative pages might users see based on different inputs or system states? After documenting your first page completely, would you like to continue with the next page in your application flow, or do you need any clarification before proceeding?
  Describe your software project's requirements and constraints by answering these key questions: What is the primary purpose and target audience of your application? Which programming languages and frameworks does your team have experience with? What are your specific requirements for frontend interfaces, backend services, database storage, user authentication, API integrations, file handling, real-time features, and payment processing? How do you prioritize factors like development speed, scalability, performance, and maintenance? What is your anticipated user load and data volume? Do you have any regulatory compliance requirements (GDPR, HIPAA, etc.)? What are your hosting preferences (cloud provider, on-premises)? What is your timeline and budget for development? Are there any legacy systems you need to integrate with? What analytics, monitoring, and DevOps practices do you plan to implement? How do you envision handling future updates and scaling needs?
  What are your project's primary objectives and target audience demographics? What design system elements do you already have established (color palette, typography, component library) or need to develop? Which frontend framework or library (React, Vue, Angular, Svelte) will serve as your technical foundation? What responsive design approach and breakpoints will you implement across devices? What accessibility standards (WCAG 2.0/2.1, Level A/AA/AAA) must your interface meet? Which user research methodologies will you employ to validate design decisions? What performance metrics and loading time targets are critical for your project? How will you structure your CSS architecture (BEM, SMACSS, CSS Modules, Styled Components)? What animation and micro-interaction guidelines should be followed for interactive elements? Which design tools and collaboration workflows will facilitate communication between designers and developers? What browser/device support requirements exist for backward compatibility? How will you implement state management for complex user flows? What testing methodologies will verify usability and technical implementation? What deployment strategy and CI/CD pipeline will you utilize for frontend releases? How will you document components and patterns for team knowledge sharing?  Guide users through a structured conversation to gather comprehensive backend requirements by first asking about their application's core purpose and which backend service they're considering; then methodically explore their database needs by requesting details about main entities one by one, prompting for specific attributes, relationships, and constraints for each; proceed to authentication requirements by asking which methods they want to support and how user roles should be structured; continue with storage requirements by inquiring about file organization and access control needs; investigate potential edge cases by asking them to consider unusual scenarios they might encounter; follow up on any unclear or incomplete answers with specific clarifying questions; maintain a conversational flow by addressing one topic area before moving to the next; adapt your questioning based on whether they're using Supabase, Firebase or another service since implementation details will differ; and conclude by asking about any additional requirements or concerns they haven't mentioned yet that might affect their backend architecture, ensuring you've gathered all necessary information before summarizing their requirements.  Describe your software development project in detail by addressing the following key aspects: What type of application are you building and what business problem does it solve? Which frontend framework and UI/UX approach best suits your project needs? What backend technology stack would be most appropriate given your requirements? How will you structure your data models and which database solution (SQL/NoSQL) aligns with your data patterns? What API architecture (REST, GraphQL, etc.) would facilitate optimal communication between components? Which authentication and security measures are necessary for your specific use case? How will you approach testing across different levels (unit, integration, end-to-end)? What deployment strategy and infrastructure (cloud provider, on-premises) makes sense for your scaling needs? Which DevOps practices and CI/CD pipeline would streamline your development workflow? Are there opportunities to incorporate AI/ML capabilities to enhance functionality? What performance optimization techniques should be prioritized based on your expected user load? How will you organize your development team and project management approach? What are your most significant technical challenges or constraints that require special consideration?


